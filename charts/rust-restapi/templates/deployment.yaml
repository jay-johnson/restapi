apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}"
spec:
  selector:
    matchLabels:
      app: "{{ .Values.env.name }}-{{ .Values.env.app.name }}"
  replicas: {{ .Values.env.app.replicas }}
  template:
    metadata:
      labels:
        app: "{{ .Values.env.name }}-{{ .Values.env.app.name }}"
    spec:
      containers:
      - name: "{{ .Values.env.app.name }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: {{ .Values.env.app.port }}
        command:
        # https://stackoverflow.com/questions/50951124/multiline-string-to-a-variable-in-a-helm-template
        {{- range $k, $v := .Values.env.app.command }}
        - {{ . | toYaml | indent 10 | trim }}
        {{- end }}
        # or inline the command here in the templae:
        # command:
        # - sh
        # - -c
        # - |
        #   #!/usr/bin/env bash -e
        #    cd /server
        #   echo "starting up"
        #   env | sort
        #   echo "/server/target/release/examples/server"
        #   /server/target/release/examples/server
        env:
        # api
        - name: SERVER_NAME_API
          value: "{{ .Values.env.app.name }}"
        - name: API_ENDPOINT
          value: "{{ .Values.env.app.host }}:{{ .Values.env.app.port }}"
        - name: API_TLS_DIR
          value: /server/certs/tls/api
        - name: API_TLS_CA
          value: /server/certs/tls/api/api-ca.pem
        - name: API_TLS_CERT
          value: /server/certs/tls/api/api.crt
        - name: API_TLS_KEY
          value: /server/certs/tls/api/api.key
        # db
        - name: DB_NAME
          # name of the db
          value: "{{ .Values.env.db.name }}"
        - name: POSTGRES_TLS_DIR
          value: /server/certs/tls/postgres
        - name: POSTGRES_TLS_CA
          value: /server/certs/tls/postgres/postgres-ca.pem
        - name: POSTGRES_TLS_CERT
          value: /server/certs/tls/postgres/postgres.crt
        - name: POSTGRES_TLS_KEY
          value: /server/certs/tls/postgres/postgres.key
        - name: POSTGRES_DB_CONN_TYPE
          value: postgresql
        - name: POSTGRES_ENDPOINT
          value: "{{ .Values.env.db.endpoint }}"
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-db-credentials"
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-db-credentials"
              key: password
        # aws
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-s3-credentials"
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-s3-credentials"
              key: secret-key
        # s3
        - name: S3_DATA_BUCKET
          value: "{{ .Values.env.s3.data.bucket }}"
        - name: S3_DATA_PREFIX
          value: "{{ .Values.env.s3.data.prefix }}"
        - name: S3_STORAGE_CLASS
          value: "{{ .Values.env.s3.data.storage_class }}"
        # disable s3 uploads by setting to "1"
        - name: S3_DATA_UPLOAD_TO_S3
          value: "{{ .Values.env.s3.data.uploads_disabled }}"
        # jwt
        - name: TOKEN_EXPIRATION_SECONDS_INTO_FUTURE
          value: "{{ .Values.env.jwt.expiration_in_seconds }}"
        - name: TOKEN_ORG
          value: "{{ .Values.env.jwt.token.org }}"
        - name: TOKEN_HEADER
          value: "{{ .Values.env.jwt.token.header }}"
        - name: TOKEN_ALGO_PRIVATE_KEY
          # must be in pkcs8 format
          value: /server/certs/tls/jwt/private-key.pem
        - name: TOKEN_ALGO_PUBLIC_KEY
          value: /server/certs/tls/jwt/public-key.pem
        - name: SERVER_PKI_DIR_JWT
          value: /server/certs/tls/jwt
        # auth
        - name: USER_EMAIL_VERIFICATION_ENABLED
          value: "{{ .Values.env.app.user.email.verification.enabled }}"
        - name: USER_EMAIL_VERIFICATION_REQUIRED
          value: "{{ .Values.env.app.user.email.verification.required_for_login }}"
        - name: USER_EMAIL_VERIFICATION_EXP_IN_SECONDS
          value: "{{ .Values.env.app.user.email.verification.expiration_in_seconds }}"
        - name: USER_OTP_EXP_IN_SECONDS
          value: "{{ .Values.env.app.user.auth.otp.expiration_in_seconds }}"
        - name: SERVER_PASSWORD_SALT
          value: "{{ .Values.env.app.user.auth.salt.password }}"
        # tracking in logs
        - name: SERVER_NAME_LABEL
          value: "{{ .Values.env.app.log.name }}"
        # debugging
        - name: RUST_BACKTRACE
          value: "{{ .Values.env.app.log.backtrace }}"
        - name: RUST_LOG
          value: "{{ .Values.env.app.log.level }}"
        - name: DEBUG
          value: "{{ .Values.env.app.log.debug }}"
        livenessProbe:
          httpGet:
            path: /metrics
            port: {{ .Values.env.app.port | default 3000 }}
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /metrics
            port: {{ .Values.env.app.port | default 3000 }}
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: "/server/certs/tls/api"
          name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-tls"
          readOnly: true
        - mountPath: "/server/certs/tls/postgres"
          name: "{{ .Values.env.name }}-postgres-tls"
          readOnly: true
        - mountPath: "/server/certs/tls/jwt"
          name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-jwt-keys"
          readOnly: true
      # end of containers
      volumes:
        - name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-tls"
          secret:
            secretName: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-tls"
        - name: "{{ .Values.env.name }}-postgres-tls"
          secret:
            secretName: "{{ .Values.env.name }}-postgres-tls"
        - name: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-jwt-keys"
          secret:
            secretName: "{{ .Values.env.name }}-{{ .Values.env.app.name }}-jwt-keys"
